import json
import os

import requests
from aiogram import F, Dispatcher
from aiogram.filters import CommandStart
from aiogram.types import CallbackQuery, Message
from sqlalchemy import select, desc
from sqlalchemy.ext.asyncio import AsyncSession

from database.engine import engine
from database.models import ArticleRequest
from keyboards import menu, command_back_to_menu, greet, subscribe_menu, back_to_menu

WB_CARD_API_URL = os.getenv("WB_CARD_API_URL")

dp = Dispatcher()

wb_api_url_params = {
    "appType": 1,
    "curr": "rub",
    "dest": -1257786,
    "spp": 30,
}


@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    await message.answer(
        text=greet.format(name=message.from_user.full_name),
        reply_markup=menu
    )


@dp.message(F.text == command_back_to_menu)
async def back_to_menu_handler(message: Message) -> None:
    await message.answer(
        text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=menu
    )


@dp.callback_query(F.data == "find_article")
async def input_article_to_find_handler(callback_query: CallbackQuery) -> None:
    """"Handler –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É"""
    await callback_query.message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª"
    )


@dp.callback_query(F.data == "get_latest_entries")
async def get_latest_entries_handler(callback_query: CallbackQuery) -> None:
    """"Handler –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    await callback_query.message.answer(
        text="–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã:"
    )

    async with AsyncSession(engine) as session:
        latest_entries = await session.scalars(
            select(ArticleRequest).limit(5).order_by(desc(ArticleRequest.request_datetime))
        )

    for entire in latest_entries:
        await callback_query.message.answer(
            text=f"–ó–∞–ø—Ä–æ—Å: ‚Ññ{entire.id}"
                 f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {entire.user_id}"
                 f"\n–ê—Ä—Ç–∏–∫—É–ª: {entire.article}"
                 f"\n–î–∞—Ç–∞: {entire.request_datetime}",
            reply_markup=back_to_menu
        )

@dp.message(F.text.regexp(r'\d{8}'))
async def find_article_handler(message: Message):
    """Handler –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ WB –∞—Ä—Ç–∏–∫—É–ª–∞"""
    await message.answer(
        text="–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–∏–Ω—è—Ç! –°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é üîé"
    )

    wb_api_url_params["nm"] = int(message.text)
    wb_response = requests.get(
        url=WB_CARD_API_URL,
        params=wb_api_url_params)
    response_data = json.loads(wb_response.content).get('data')

    # –ü–æ–∏—Å–∫ –≤ –æ—Ç–≤–µ—Ç–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞ WB.
    if not response_data:
        return message.answer(
            text="–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Å –≤–Ω–µ—à–Ω–∏–º API, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–æ–æ–±—â–∏—Ç–µ @AVCAMID"
        )

    # –ü–æ–∏—Å–∫ –≤ –æ—Ç–≤–µ—Ç–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å —Ç–æ–≤–∞—Ä–æ–º
    article_data = response_data.get('products')
    if not article_data:
        return message.answer(
            text="–¢–∞–∫–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ Wildberries!"
        )

    # –ü–æ–¥—Å—á–µ—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ –≤—Å–µ—Ö —Å–∫–ª–∞–¥–∞—Ö
    item_stocks = 0
    for size in article_data[0].get('sizes'):
        for stock in size.get('stocks'):
            item_stocks += stock.get('qty')

    # –î–µ–ª–µ–Ω–∏–µ –Ω–∞ 100 —É —Ü–µ–Ω, —Ç–∫ –ø—Ä–∏—Ö–æ–¥—è—Ç —Ü–µ–Ω—ã –≤ –∫–æ–ø–µ–π–∫–∞—Ö.
    search_result = {
        "item_name": article_data.get('name'),
        "item_article": message.text,
        "item_price": article_data.get('priceU') / 100,
        "item_saleprice": article_data.get('salePriceU') / 100,
        "item_rating": article_data.get('reviewRating'),
        "item_stocks": item_stocks
    }

    # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≤ –ë–î
    async with AsyncSession(engine) as session:
        new_article = ArticleRequest(
            user_id=message.from_user.id,
            article=message.text,
        )
        session.add(new_article)
        await session.commit()

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result_message = (
        f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {search_result["item_name"]}"
        f"\n–ê—Ä—Ç–∏–∫—É–ª: {search_result["item_article"]}"
        f"\n–¶–µ–Ω–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏ {search_result["item_price"]}"
        f"\n–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π: {search_result["item_saleprice"]}"
        f"\n–†–µ–π—Ç–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞: {search_result["item_rating"]}"
        f"\n–û—Å—Ç–∞–ª–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: {search_result["item_stocks"]}"
        f"\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: https://www.wildberries.ru/catalog/{message.text}/detail.aspx"
        )

    await message.answer(
        text=result_message,
    )
    await message.answer(
        text="–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ—Ç –∞—Ä—Ç–∏–∫—É–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!",
        reply_markup=subscribe_menu
    )